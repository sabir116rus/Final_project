# orders/models.py

from django.db import models
from django.contrib.auth.models import User
from products.models import Product
from django.conf import settings
from asgiref.sync import async_to_sync, sync_to_async
from aiogram import Bot

class Order(models.Model):
    STATUS_CHOICES = [
        ('pending', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'),  # –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
        ('accepted', '–ü—Ä–∏–Ω—è—Ç –∫ —Ä–∞–±–æ—Ç–µ'),  # –ü—Ä–∏–Ω—è—Ç –∫ —Ä–∞–±–æ—Ç–µ
        ('in_progress', '–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ'),  # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        ('in_delivery', '–í –¥–æ—Å—Ç–∞–≤–∫–µ'),  # –í –¥–æ—Å—Ç–∞–≤–∫–µ
        ('completed', '–í—ã–ø–æ–ª–Ω–µ–Ω'),  # –ó–∞–≤–µ—Ä—à–µ–Ω
        ('canceled', '–û—Ç–º–µ–Ω–µ–Ω'),  # –û—Ç–º–µ–Ω–µ–Ω
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='orders')
    created_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    total_price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    address = models.CharField(max_length=255)
    phone = models.CharField(max_length=20)
    comment = models.TextField(blank=True, null=True, verbose_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É')

    def status_color(self):
        status_colors = {
            'pending': 'warning',
            'accepted': 'info',
            'in_progress': 'primary',
            'in_delivery': 'secondary',
            'completed': 'success',
            'canceled': 'danger',
        }
        return status_colors.get(self.status, 'light')

    status_color.short_description = '–¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞'

    def __str__(self):
        return f'–ó–∞–∫–∞–∑ ‚Ññ{self.id} –æ—Ç {self.user.username}'

    class Meta:
        verbose_name = '–ó–∞–∫–∞–∑'
        verbose_name_plural = '–ó–∞–∫–∞–∑—ã'

    def save(self, *args, **kwargs):
        previous_status = None
        if self.pk:
            previous_status = Order.objects.get(pk=self.pk).status
        super().save(*args, **kwargs)
        if previous_status and previous_status != self.status:
            # –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            async_to_sync(send_status_change_notification)(self)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
async def send_status_change_notification(order):
    try:
        bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ORM –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        def get_notification_data():
            text = (
                f"üîî <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id} –∏–∑–º–µ–Ω–µ–Ω</b>\n"
                f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: <b>{order.get_status_display()}</b>"
            )
            telegram_id = order.user.profile.telegram_id
            return text, telegram_id

        text, telegram_id = await sync_to_async(get_notification_data)()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(
            chat_id=settings.ADMIN_TELEGRAM_ID,
            text=text,
            parse_mode='HTML'
        )
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤—è–∑–∞–ª —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —Å Telegram, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if telegram_id:
            await bot.send_message(
                chat_id=telegram_id,
                text=text,
                parse_mode='HTML'
            )
        await bot.session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")


class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name='items')
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    price = models.DecimalField(max_digits=10, decimal_places=2)  # –¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞

    def __str__(self):
        return f'{self.product.name} x {self.quantity}'

    def get_cost(self):
        return self.price * self.quantity
