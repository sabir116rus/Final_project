# orders/views.py

from django.shortcuts import render, redirect, get_object_or_404
from products.models import Product
from .cart import Cart
from django.views.decorators.http import require_POST
from .models import OrderItem
from django.contrib.auth.decorators import login_required
from .forms import OrderCreateForm
from django.contrib import messages
from datetime import datetime, time
from django.conf import settings
from asgiref.sync import async_to_sync, sync_to_async
from aiogram import Bot
import os

@login_required
def order_create(request):
    cart = Cart(request)
    if not cart:
        messages.error(request, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
        return redirect('product_list')

    current_time = datetime.now().time()
    if not time(1, 0) <= current_time <= time(23, 0):
        messages.error(request, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å 1:00 –¥–æ 23:00.')
        return redirect('cart_detail')

    if request.method == 'POST':
        form = OrderCreateForm(request.POST)
        if form.is_valid():
            order = form.save(commit=False)
            order.user = request.user
            order.total_price = cart.get_total_price()
            order.save()
            for item in cart:
                OrderItem.objects.create(
                    order=order,
                    product=item['product'],
                    price=item['price'],
                    quantity=item['quantity']
                )
            # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
            cart.clear()
            messages.success(request, f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!')

            # –ü–µ—Ä–µ–¥–∞–µ–º order –≤ send_order_notification
            async_to_sync(send_order_notification)(order)

            return render(request, 'orders/order_created.html', {'order': order})
    else:
        form = OrderCreateForm()
    return render(request, 'orders/order_create.html', {'cart': cart, 'form': form})


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def send_order_notification(order):
    try:
        bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ORM –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        def get_order_data():
            first_item = order.items.first()
            product_image_path = first_item.product.image.path if first_item else None
            text = (
                f"üõç <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order.id}</b>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user.username}\n"
                f"üí∞ –°—É–º–º–∞: {order.total_price} —Ä—É–±.\n"
                f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.address}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
                f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment or '–ù–µ—Ç'}"
            )
            return product_image_path, text

        product_image_path, text = await sync_to_async(get_order_data)()

        if product_image_path and os.path.exists(product_image_path):
            with open(product_image_path, 'rb') as photo:
                await bot.send_photo(
                    chat_id=settings.ADMIN_TELEGRAM_ID,
                    photo=photo,
                    caption=text,
                    parse_mode='HTML'
                )
        else:
            await bot.send_message(
                chat_id=settings.ADMIN_TELEGRAM_ID,
                text=text,
                parse_mode='HTML'
            )
        await bot.session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

@require_POST
def cart_add(request, product_id):
    cart = Cart(request)
    product = get_object_or_404(Product, id=product_id)
    if not product.available:
        messages.error(request, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞.')
        return redirect('product_list')
    cart.add(product=product)
    messages.success(request, f'–¢–æ–≤–∞—Ä "{product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.')
    return redirect('product_list')

@require_POST
def cart_remove(request, product_id):
    cart = Cart(request)
    product = get_object_or_404(Product, id=product_id)
    cart.remove(product)
    messages.success(request, f'–¢–æ–≤–∞—Ä "{product.name}" —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')
    return redirect('cart_detail')

def cart_detail(request):
    cart = Cart(request)
    return render(request, 'orders/cart_detail.html', {'cart': cart})
